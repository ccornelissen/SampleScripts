Shader "Shaders/ToonShader" 
{
	Properties 
	{
		//Maps
		_MainTex ("Base (RGB)", 2D) = "white" {} //Main texture
		
		
		//Unity
		_Color ("Color Tine", Color) = (1,1,1,1) //Allowing color tinting of object/texture
		_UnlitColor ("Unlit Color", Color) = (1,1,1,1) //Controls darkness of shaadows
		_DiffusionThreshold ("Lighting Threshold", Range(-1.1, 1)) = 0.1 //Controls shadow threshold
		_Diffusion ("Diffusion", Range(0, 0.99)) = 0.0 //Controls diffusion of shadow line
		_SpecColor ("Specular Color", Color) = (1,1,1,1) //Color of specular
		_Shininess ("Shininess", Range(0.5,1)) = 1 //Size of the specular
		_SpecDiffusion ("Specular Diffusion", Range(0, 0.99)) = 0.0 //Specular sharpness
	}
	SubShader 
	{
		Pass 
		{
			Tags { "LightMode" = "ForwardBase" } //Forward/ first pass
			
			CGPROGRAM
			//Setting up Cg functions
			#pragma vertex vert
			#pragma fragment frag
			
			//user variables
			uniform sampler2D _MainTex;
			uniform half4 _MainTex_ST;
			
			uniform fixed4 _Color;
			uniform fixed4 _UnlitColor;
			
			uniform fixed _DiffusionThreshold;
			uniform fixed _Diffusion;
			
			uniform fixed4 _SpecColor;
			uniform fixed _Shininess;
			uniform half _SpecDiffusion;
			
			
			//defined variables
			uniform half4 _LightColor0;
			
			//base input structs
			struct vertexInput
			{
				half4 vertex : POSITION; //Set up object vertex
				half3 normal : NORMAL; //Set up object normals
				half4 texcoord : TEXCOORD0; //Set up object texture coordinates
				half4 tangent : TANGENT; //Set up objects tangent
			};
			
			struct vertexOutput
			{
				//Creating vertex reference variables
				half4 pos : SV_POSITION; //Position
				half4 tex : TEXCOORD0; //Texture
				fixed3 normalDir : TEXCOORD1; //Normal Direction
				fixed4 lightDir : TEXCOORD2; //Light Direction
				fixed3 viewDir : TEXCOORD3; //View Direction
			};
			
			vertexOutput vert(vertexInput v) //Vertex function
			{
				vertexOutput o;
				
				//normal direction
				o.normalDir = normalize(mul(half4(v.normal, 0.0), _World2Object).xyz);
				
				//tranform position
				o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
				
				//world position
				half4 posWorld = mul(_Object2World, v.vertex);
				
				//view direction
				o.viewDir = normalize(_WorldSpaceCameraPos.xyz - posWorld.xyz);
				
				//Texture
				o.tex = v.texcoord;
				
				//Distance from light source
				half3 fragmentToLightSource = _WorldSpaceLightPos0.xyz - posWorld.xyz;
				
				//calculating light direction
				o.lightDir = fixed4(
					normalize(lerp(_WorldSpaceLightPos0.xyz, fragmentToLightSource, _WorldSpaceLightPos0.w)),
					lerp(1.0, 1.0/length(fragmentToLightSource), _WorldSpaceLightPos0.w)
				);
				
				
				return o;
			}
			
			fixed4 frag(vertexOutput i) : COLOR //Fragment function
			{
				//Texture maps
				fixed4 tex = tex2D(_MainTex, i.tex.xy * _MainTex_ST.xy + _MainTex_ST.zw);
				
				//Normal and light direction dot product
				fixed nDotL = saturate(dot(i.normalDir, i.lightDir.xyz));
				
				//Calculating diffuse cut off(shadows)
				fixed diffuseCutoff = saturate((max(_DiffusionThreshold, nDotL) - _DiffusionThreshold) * pow((2 - _Diffusion), 10));
				//Calculating specular cuttoff 
				fixed specularCutoff = saturate(max(_Shininess, dot(reflect(-i.lightDir.xyz, i.normalDir), i.viewDir)) - _Shininess) * pow((2 - _SpecDiffusion), 10);
				
				//Applying color to shadows
				fixed3 shadowColor = (1 - diffuseCutoff) * _UnlitColor.xyz;
				
				//Applying color to lit parts of object
				fixed3 diffuseReflection = (1 - specularCutoff) * _Color.xyz * diffuseCutoff;
				
				//Applying specular color
				fixed3 specularReflection = _SpecColor.xyz * specularCutoff;
				
				//Adding light color
				fixed3 LightAdditive = _LightColor0.xyz * nDotL;
				
				//Final object lighting
				fixed3 lightFinal = shadowColor + diffuseReflection + (specularReflection) + LightAdditive + UNITY_LIGHTMODEL_AMBIENT.xyz;
				
				//Object texture * lighting * Color
				return fixed4(tex.xyz * lightFinal * _Color.xyz, 1.0);
			}
			
			ENDCG
		}
		
		Pass
		{
			Tags { "LightMode" = "ForwardAdd" } //Additive pass, for secondary lights
			Blend OneMinusDstColor One //Blending mode used for additional lights
			
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			
			//user variables
			uniform sampler2D _MainTex;
			uniform half4 _MainTex_ST;
			
			uniform fixed4 _Color;
			uniform fixed4 _UnlitColor;
			
			uniform fixed _DiffusionThreshold;
			uniform fixed _Diffusion;
			
			uniform fixed4 _SpecColor;
			uniform fixed _Shininess;
			uniform half _SpecDiffusion;
			
			
			//defined variables
			
			uniform half4 _LightColor0;
			
			//base input structs
			struct vertexInput
			{
				half4 vertex : POSITION;
				half3 normal : NORMAL;
				half4 texcoord : TEXCOORD0;
				half4 tangent : TANGENT;
			};
			
			struct vertexOutput
			{
				half4 pos : SV_POSITION;
				half4 tex : TEXCOORD0;
				half3 tangentWorld : TEXCOORD1;
				half3 binormalWorld : TEXCOORD2;
				fixed3 normalDir : TEXCOORD3;
				fixed4 lightDir : TEXCOORD4;
				fixed3 viewDir : TEXCOORD5;
			};
			
			vertexOutput vert(vertexInput v)
			{
				vertexOutput o;
				
				//normal direction
				o.normalDir = normalize(mul(half4(v.normal, 0.0), _World2Object).xyz);
				
				//tranform position
				o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
				
				//world position
				half4 posWorld = mul(_Object2World, v.vertex);
				
				//view direction
				o.viewDir = normalize(_WorldSpaceCameraPos.xyz - posWorld.xyz);
				
				//Texture
				o.tex = v.texcoord;
				
				//light direction
				half3 fragmentToLightSource = _WorldSpaceLightPos0.xyz - posWorld.xyz;
				o.lightDir = fixed4(
					normalize(lerp(_WorldSpaceLightPos0.xyz, fragmentToLightSource, _WorldSpaceLightPos0.w)),
					lerp(1.0, 1.0/length(fragmentToLightSource), _WorldSpaceLightPos0.w)
				);
				
				
				return o;
			}
			
			fixed4 frag(vertexOutput i) : COLOR
			{
				//Texture maps
				fixed4 tex = tex2D(_MainTex, i.tex.xy * _MainTex_ST.xy + _MainTex_ST.zw);
				
				//lighting
				fixed nDotL = saturate(dot(i.normalDir, i.lightDir.xyz));
				
				fixed diffuseCutoff = saturate((max(_DiffusionThreshold, nDotL) - _DiffusionThreshold) * pow((2 - _Diffusion), 10));
				fixed specularCutoff = saturate(max(_Shininess, dot(reflect(-i.lightDir.xyz, i.normalDir), i.viewDir)) - _Shininess) * pow((2 - _SpecDiffusion), 10);
				
				fixed3 shadowColor = (1 - diffuseCutoff) * _UnlitColor.xyz;
				fixed3 diffuseReflection = (1 - specularCutoff) * _Color.xyz * diffuseCutoff;
				fixed3 specularReflection = _SpecColor.xyz * specularCutoff;
				
				fixed3 LightAdditive = _LightColor0.xyz * nDotL;
				
				fixed3 lightFinal = shadowColor + diffuseReflection + (specularReflection) + LightAdditive;
				
				
				return fixed4(tex.xyz * lightFinal * _Color.xyz, 1.0);
			}
			
			ENDCG
		}
	}
	 
	FallBack "Specular" //Shader fallback
}
